-- 저장 서브프로그램 : 이름을 지정하여 저장해두는 PL/SQL 프로그램
-- PROCEDURE / FUNCTION / PACKAGE / TRIGGER

-- 파라미터 사용하지 않은 프로시저
-- CREATE [OR REPLACE] PROCEDURE 프로시저 이름
-- IS | AS
--     선언부
-- BEGIN
--     실행부
-- EXCEPTION
--     예외 처리부
-- END [프로시저 이름];

CREATE OR REPLACE PROCEDURE PRO_EMP
IS
    V_EMPNO NUMBER(4) := 7788;
    V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME := 'SCOTT';
    DBMS_OUTPUT.PUT_LINE('V_EMPNO : '||V_EMPNO);
    DBMS_OUTPUT.PUT_LINE('V_ENAME : '||V_ENAME);
END;
/

-- EXEC 프로시저명;
EXECUTE PRO_EMP;

SELECT * FROM USER_SOURCE WHERE NAME='PRO_EMP';
DROP PROCEDURE PRO_EMP;

-- 파라미터 사용하는 프로시저
-- CREATE [OR REPLACE] PROCEDURE 프로시저 이름
-- [(파라미터 이름 1[MODES] 자료형 [ := | DEFAULT 기본값],
--  파라미터 이름 2[MODES] 자료형 [ := | DEFAULT 기본값])]
-- IS | AS
--     선언부
-- BEGIN
--     실행부
-- EXCEPTION
--     예외 처리부
-- END [프로시저 이름];

-- MODES : IN / OUT / IN OUT

CREATE OR REPLACE PROCEDURE PRO_NUM_IN(
    P1 in NUMBER,
    P2 NUMBER,
    P3 NUMBER := 3,
    P4 NUMBER DEFAULT 4
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('P1 : '||P1);
    DBMS_OUTPUT.PUT_LINE('P2 : '||P2);
    DBMS_OUTPUT.PUT_LINE('P3 : '||P3);
    DBMS_OUTPUT.PUT_LINE('P4 : '||P4);
END;
/

EXEC PRO_NUM_IN(10,20,30,40);
EXEC PRO_NUM_IN(10,20);

-- 사원번호를 입력받아(IN) 사원이름, 급여 출력
CREATE OR REPLACE PROCEDURE PRO_EMP_OUT(
    IN_EMPNO IN EMP.EMPNO%TYPE,
    OUT_ENAME OUT EMP.ENAME%TYPE,
    OUT_SAL OUT EMP.SAL%TYPE
)
IS
BEGIN
    SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL FROM EMP WHERE EMPNO = IN_EMPNO;
END;
/

DECLARE
    ENAME EMP.ENAME%TYPE;
    SAL EMP.SAL%TYPE;
BEGIN
    PRO_EMP_OUT(7788,ENAME,SAL);
    DBMS_OUTPUT.PUT_LINE('ENAME : '||ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL : '||SAL);
END;
/

CREATE OR REPLACE PROCEDURE PRO_NUM_INOUT(
    INOUT_NUM IN OUT NUMBER
)
IS 
BEGIN
    INOUT_NUM := INOUT_NUM*2;
END;
/

DECLARE
    NO NUMBER;
BEGIN
    NO := 5;
    PRO_NUM_INOUT(NO);
    DBMS_OUTPUT.PUT_LINE('NO : '||NO);
END;
/

-- CREATE [OR REPLACE] FUNCTION 함수 이름
-- [(파라미터 이름 1[IN] 자료형,
--  파라미터 이름 2[IN] 자료형)]
-- RETURN 자료형
-- IS | AS
--     선언부
-- BEGIN
--     실행부
--     RETURN (반환값);
-- EXCEPTION
--     예외 처리부
-- END [함수 이름];

CREATE OR REPLACE FUNCTION FUNC_AFTERTAX(
    SAL NUMBER
) RETURN NUMBER
IS
    TAX NUMBER := 0.05;
BEGIN 
   RETURN ROUND( SAL - (SAL*0.05));
END;
/

SELECT FUNC_AFTERTAX(3000) FROM DUAL;
SELECT EMPNO, ENAME, SAL, FUNC_AFTERTAX(SAL) AFTERTAX FROM EMP;

-- 패키지 : 여러 서브프로그램을 통합,관리
-- 패키지 명세
-- CREATE [OR REPLACE] PACKAGE 패키지 이름
-- IS | AS
--    서브프로그램을 포함한 다양한 객체 선언
-- END [패캐지 이름]';

-- 패키지 바디
-- CREATE [OR REPLACE] PACKAGE BODY 패키지 이름
-- IS | AS
--    패키지 명세에서 선언한 서브프로그램을 포함한 여러 객체를 정의
--    경우에 따라 패키지 명세에 존재하지 않는 객체 및 서브프로그램도 정의 가능
-- END [패키지 이름];

-- 트리거 : 데이터베이스 내 이벤트 발생시 자동 실행될 기능을 정의
-- DML TRIGGER
-- CREATE [OR REPLACE] TRIGGER 트리거 이름
-- BEFORE | AFTER
-- INSERT | UPDATE | DELETE ON 테이블 이름
-- REFERENCING OLD AS OLD | NEW AS NEW
-- FOR EACH ROW WHEN 조건식
-- FOLLOWS 트리거 이름2, 트리거 이름3 ...
-- ENABLE | DISABLE
--
-- DECLARE 선언부
-- BEGIN 실행부
-- EXCEPTION 예외부
-- END;

SELECT * FROM EMP01;
DROP TABLE EMP01 PURGE;
CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(20),
    JOB VARCHAR2(20)
);

CREATE OR REPLACE TRIGGER TRI_01
AFTER INSERT
ON EMP01
BEGIN
    DBMS_OUTPUT.PUT_LINE('신입사원이 입사함');
END;
/

INSERT INTO EMP01 VALUES(1,'JAVA','PROGRAMMER');

-- 신입사원이 입사하면 급여테이블에 새로운 데이터를 자동으로 추가
CREATE TABLE SAL01(
    SALNO NUMBER(4) PRIMARY KEY,
    SAL NUMBER(7,2),
    EMPNO NUMBER(4) REFERENCES EMP01(EMPNO)
);

CREATE SEQUENCE SAL01_SEQ;
CREATE OR REPLACE TRIGGER TRI02
AFTER INSERT
ON EMP01
FOR EACH ROW
BEGIN 
    INSERT INTO SAL01 VALUES(SAL01_SEQ.NEXTVAL, 100,:NEW.EMPNO);
END;
/

INSERT INTO EMP01 VALUES(2,'DD','DESIGNER');
SELECT * FROM EMP01;
SELECT * FROM SAL01;
INSERT INTO EMP01 VALUES(3,'GG','PRESIDENT');

-- 사원 정보 제거 시 급여 정보도 같이 삭제
CREATE OR REPLACE TRIGGER TRI03
AFTER DELETE
ON EMP01
FOR EACH ROW
BEGIN
    DELETE FROM SAL01 WHERE EMPNO= :OLD.EMPNO;
END;
/

DELETE FROM EMP01 WHERE EMPNO = 2;
SELECT * FROM EMP01;
SELECT * FROM SAL01;






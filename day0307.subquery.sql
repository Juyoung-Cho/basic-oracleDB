-- SUBQUERY : SQL문을 실행하는데 필요한 데이터를 추가로 조회하기 위해 SQL문 내부에서 사용하는 SELECT문을 의미.
-- 단일행 서브쿼리(SINGLE-ROW SUBQUERY) : 실행 결과가 단 하나의 행으로 나오는 서브쿼리(단일행 연산자를 사용하여 비교)
-- Q.JONES보다 급여가 높은 직원의 이름과 급여를 출력
SELECT SAL FROM EMP WHERE ENAME = 'JONES';
SELECT ENAME, SAL FROM EMP WHERE SAL > 2975;

SELECT ENAME, SAL FROM EMP WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME = 'JONES');

-- Q.SCOTT의 부서명을 출력
SELECT DNAME FROM DEPT WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'SCOTT');

-- Q.평균 급여보다 많이 받는 사원의 이름과 급여를 출력
SELECT ENAME, SAL FROM EMP WHERE SAL > (SELECT AVG(SAL) FROM EMP);

-- Q.'SCOTT'보다 먼저 입사한 사원의 모든 데이터를 출력
SELECT * FROM EMP WHERE HIREDATE < (SELECT HIREDATE FROM EMP WHERE ENAME = 'SCOTT');

-- JOIN 같이 쓰기
-- Q.평균 급여보다 많이 받는 사원의 이름과 부서명을 출력
SELECT E.ENAME, D.DNAME FROM EMP E, DEPT D WHERE E.DEPTNO = D.DEPTNO AND SAL > (SELECT AVG(SAL) FROM EMP);

-- Q.평균 급여보다 적거나 같은 20번 부서 의 사원명, 부서명, 급여
SELECT E.ENAME, D.DNAME, SAL FROM EMP E, DEPT D 
WHERE E.DEPTNO = D.DEPTNO 
AND E.SAL <=(SELECT AVG(SAL) FROM EMP)
AND E.DEPTNO = 20;

-- 다중행 서브쿼리(MULTIPLE-ROW SUBQUERY) : 실행 결과 행이 여러 개 나오는 서브쿼리 
-- 다중행 연산자 : IN, ANY, SOME, ALL, EXISTS

-- IN : 서브쿼리의 결과와 일치하는 값을 가진 행을 출력
-- Q.각 부서별 최고 급여와 같은 급여를 받는 사원의 이름과 급여 출력
SELECT ENAME, SAL FROM EMP 
WHERE SAL IN (SELECT MAX(SAL)FROM EMP GROUP BY DEPTNO);

-- Q.급여를 3000이상 받는 사원이 소속된 부서와 동일한 부서에서 근무하는 사원의 이름과 부서번호 출력
SELECT ENAME, DEPTNO, SAL FROM EMP 
WHERE DEPTNO
IN (SELECT DISTINCT DEPTNO FROM EMP WHERE SAL >= 3000);

-- ANY, SOME : 서브쿼리의 여러 결과 값에 메인쿼리의 조건식을 대입, 결과가 하나라도 TRUE일 경우, 메인쿼리 조건식이 TRUE
-- Q.부서가 30번인 사원들의 급여 중 제일 작은 값보다 많은 급여를 받는 사원의 이름, 급여 출력
SELECT ENAME, SAL FROM EMP WHERE SAL > ANY(SELECT SAL FROM EMP WHERE DEPTNO = 30);

-- Q.부서가 30번인 사원들의 급여 중 제일 큰 값보다 많은 급여를 받는 사원의 이름, 급여
SELECT ENAME, SAL FROM EMP WHERE SAL > ALL(SELECT SAL FROM EMP WHERE DEPTNO = 30);

-- EXISTS : 서브쿼리의 결과가 존재할 때, TRUE. FALSE면 메인쿼리 실행X / NOT EXISTS
SELECT * FROM EMP WHERE EXISTS (SELECT EMPNO FROM EMP WHERE EMPNO = 9999);

-- 다중열 서브쿼리(MULTIPLE-COLUMN SUBQUERY) : 서브쿼리의 SELECT절에 비교할데이터를 여러 개 지정하는 방식.
SELECT * FROM EMP WHERE (DEPTNO, SAL) IN (
SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO);

-- FROM절에 사용하는 서브쿼리 : 별칭을 지정하여 테이블처럼 사용
SELECT E10.EMPNO, E10.ENAME, E10.DEPTNO, D.DNAME, D.LOC
FROM
(SELECT * FROM EMP WHERE DEPTNO = 10) E10,
(SELECT * FROM DEPT) D
WHERE E10.DEPTNO = D.DEPTNO;

-- WITH절 : 메인쿼리 사용 전 먼저 이름과 함께 작성
WITH
E10 AS (SELECT * FROM EMP WHERE DEPTNO = 10),
D AS (SELECT * FROM DEPT)
SELECT * FROM E10, D WHERE E10.DEPTNO = D.DEPTNO;

-- ROWNUM : 가상번호
SELECT EMPNO, ENAME, SAL, ROWNUM FROM EMP ORDER BY SAL DESC; -- 정렬되기 전 ROWNUM이 붙음
SELECT EMPNO, ENAME, SAL, ROWNUM FROM (SELECT * FROM EMP ORDER BY SAL DESC) 
WHERE ROWNUM <= 5; 

SELECT * 
FROM (SELECT EMPNO, ENAME, SAL, ROWNUM R
FROM (SELECT * FROM EMP ORDER BY SAL DESC)
ORDER BY SAL DESC) WHERE R >= 6 AND R <= 10; -- 특정 시작지점이 따로 있는 경우 한 번 더 감싼다.

-- SELECT절에 사용하는 서브쿼리 (스칼라 서브쿼리) : 하나의 열 영역으로서 결과 출력
SELECT EMPNO, ENAME, JOB, SAL, 
(SELECT GRADE FROM SALGRADE 
    WHERE E.SAL BETWEEN LOSAL AND HISAL) SALGRADE, 
DEPTNO, (SELECT DNAME FROM DEPT D WHERE E.DEPTNO = D.DEPTNO) DNAME FROM EMP E;


-- 1. EMP에서 이름에 'L'자를 갖는 사원의 이름, 업무, 부서명, 급여를 출력
SELECT ENAME, JOB, D.DNAME, SAL FROM EMP E NATURAL JOIN DEPT D WHERE ENAME LIKE '%L%';
-- 2. 이름이 F로 시작하는 사람의 이름, 부서명 출력 
SELECT ENAME, DNAME FROM EMP E INNER JOIN DEPT D ON E.DEPTNO = D.DEPTNO 
WHERE ENAME LIKE 'F%';
-- 3. 위치 상관 없이 이름 중에 A가 들어있는 사원 
SELECT ENAME FROM EMP WHERE ENAME LIKE '%A%';
SELECT ENAME FROM EMP WHERE INSTR(ENAME,'A') >0;
-- 4. 이름이 N으로 끝나는 사원
SELECT ENAME FROM EMP WHERE ENAME LIKE '%N';
SELECT ENAME FROM EMP WHERE SUBSTR(ENAME,-1,1)='N';
-- 5. SCOTT과 동일한 부서에서 일하는 사원들의 이름 출력
SELECT E.ENAME FROM EMP E, EMP M 
WHERE E.DEPTNO = M.DEPTNO
AND M.ENAME = 'SCOTT'
AND E.ENAME <> 'SCOTT';
-- 6. 이름에 A를 포함하지 않는 사원
SELECT * FROM EMP WHERE INSTR(ENAME, 'A') =0;
SELECT * FROM EMP WHERE ENAME NOT LIKE '%A%';
-- 7. 현재 날짜를 구하는 쿼리
SELECT SYSDATE FROM DUAL;
-- 8. 사원들의 입사일에서 입사 년도와 입사 달을 출력
SELECT ENAME, SUBSTR(HIREDATE,1,2) 년도, SUBSTR(HIREDATE,4,2) 달 FROM EMP;
SELECT ENAME, TO_CHAR(HIREDATE, 'YYYY-MM') FROM EMP;
-- 9. 9월에 입사한 사원
SELECT ENAME FROM EMP WHERE SUBSTR(HIREDATE,4,2) = 09;
-- 10. 그룹 함수를 이용해서 사원의 총 급여
SELECT SUM(SAL) FROM EMP;
-- 11. 커미션(COMM) 총액 
SELECT SUM(COMM) FROM EMP;
-- 12. ACCOUNTING부서 소속사원의 이름과 입사일을 출력
SELECT ENAME, HIREDATE FROM EMP E NATURAL JOIN DEPT D WHERE DNAME = 'ACCOUNTING';
select ename, hiredate from emp where deptno = 
(select deptno from dept where dname ='ACCOUNTING');
-- 13. 소속 부서별 급여 총액과 평균 급여
SELECT DEPTNO, SUM(SAL), AVG(SAL) FROM EMP GROUP BY DEPTNO;
-- 14. 커미션을 받는 사원의 이름과 급여를 출력
SELECT ENAME, SAL FROM EMP WHERE COMM IS NOT NULL;
-- 15. 이름이 SCOTT인 사람의 부서명을 출력
SELECT DNAME FROM DEPT NATURAL JOIN EMP WHERE ENAME = 'SCOTT';
-- 16. SALESMAN의 사원번호, 이름, 급여, 부서명과 근무지를 출력
SELECT EMPNO, ENAME, SAL, DNAME, LOC FROM EMP NATURAL JOIN DEPT WHERE JOB ='SALESMAN';
-- 17. 각 사원의 사원명, 급여, 급여 등급을 출력
SELECT ENAME, SAL, GRADE FROM EMP INNER JOIN SALGRADE ON SAL BETWEEN LOSAL AND HISAL;
-- 18. NEW YORK에서 근무하고 있는 사원에 대하여 이름, 업무, 급여, 부서명을 출력
SELECT ENAME, JOB, SAL, DNAME FROM EMP NATURAL JOIN DEPT WHERE LOC = 'NEW YORK';






